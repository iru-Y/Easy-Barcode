"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.builder = builder;
exports.default = default_1;
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const workspace_1 = require("../../builders/utils/workspace");
function writeBuilder(project, target, builder, mandatory = false, options) {
    if (!project?.architect?.[target]) {
        if (mandatory) {
            throw new schematics_1.SchematicsException(`Cannot read the output path(architect.build.serve.builder) in angular.json`);
        }
        return;
    }
    project.architect[target] = {
        ...project.architect[target],
        options: {
            ...project.architect[target].options,
            ...options,
        },
        builder,
    };
}
function hasTargetBuilder(project, target, builderType) {
    return project.architect[target]?.builder.endsWith(`:${builderType}`);
}
function builder(options) {
    return (tree, _context) => {
        const { path: workspacePath, workspace } = (0, workspace_1.getWorkspace)(tree);
        if (!options.project) {
            throw new schematics_1.SchematicsException("No Angular project found in the workspace");
        }
        const project = workspace.projects[options.project];
        if (!project) {
            throw new schematics_1.SchematicsException("The specified Angular project is not defined in this workspace");
        }
        if (project.projectType !== "application") {
            throw new schematics_1.SchematicsException(`@ngx-env/builder requires an Angular project type of "application" in angular.json`);
        }
        if (!hasTargetBuilder(project, "build", "application") &&
            !hasTargetBuilder(project, "build", "browser")) {
            throw new schematics_1.SchematicsException(`@ngx-env/builder requires one of "application" or "browser" builder`);
        }
        if (hasTargetBuilder(project, "build", "application")) {
            writeBuilder(project, "build", "@ngx-env/builder:application", true);
        }
        else {
            writeBuilder(project, "build", "@ngx-env/builder:browser", true);
            writeBuilder(project, "server", "@ngx-env/builder:server");
            const webpackDependency = {
                name: "@dotenv-run/webpack",
                version: "~1.5.2",
            };
            try {
                addPackageJsonDependency(tree, webpackDependency);
                _context.addTask(new tasks_1.NodePackageInstallTask());
            }
            catch {
                console.log(`Cannot write ${webpackDependency.name}@${webpackDependency.version} to package.json`);
                console.log(`Add ${webpackDependency.name}@${webpackDependency.version} to package.json manually`);
            }
        }
        writeBuilder(project, "serve", "@ngx-env/builder:dev-server", true);
        // if (hasTargetBuilder(project, "test", "unit-test")) {
        //   writeBuilder(project, "test", "@ngx-env/builder:unit-test");
        // } else
        if (hasTargetBuilder(project, "test", "karma")) {
            writeBuilder(project, "test", "@ngx-env/builder:karma");
        }
        writeBuilder(project, "extract-i18n", "@ngx-env/builder:extract-i18n");
        tree.overwrite(workspacePath, JSON.stringify(workspace, null, 2));
        return tree;
    };
}
function getPackageJson(tree) {
    const packageJson = JSON.parse(tree.read("package.json").toString());
    return packageJson;
}
function addPackageJsonDependency(tree, dependency) {
    const packageJson = getPackageJson(tree);
    packageJson.devDependencies = packageJson.dependencies || {};
    packageJson.devDependencies[dependency.name] = dependency.version;
    tree.overwrite("package.json", JSON.stringify(packageJson, null, 2));
}
function default_1(options) {
    return (0, schematics_1.chain)([
        (0, schematics_1.mergeWith)((0, schematics_1.apply)((0, schematics_1.url)("./template"), [(0, schematics_1.move)((0, core_1.normalize)("./src"))]), schematics_1.MergeStrategy.Overwrite),
        builder(options),
    ]);
}
//# sourceMappingURL=index.js.map